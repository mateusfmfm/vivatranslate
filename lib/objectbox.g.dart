// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'app/features/ui/home/data/todo_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8603485986068716409),
      name: 'Todo',
      lastPropertyId: const IdUid(8, 6900223075612399274),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7826969740895612372),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5057346035688916435),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5692763107412467226),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 300496279546851944),
            name: 'isCompleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2457157229254666075),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3815763942776790256),
            name: 'todoDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5233719317109496273),
            name: 'audioBase64',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6900223075612399274),
            name: 'audioPath',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 8603485986068716409),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Todo: EntityDefinition<Todo>(
        model: _entities[0],
        toOneRelations: (Todo object) => [],
        toManyRelations: (Todo object) => {},
        getId: (Todo object) => object.id,
        setId: (Todo object, int id) {
          object.id = id;
        },
        objectToFB: (Todo object, fb.Builder fbb) {
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final audioBase64Offset = object.audioBase64 == null
              ? null
              : fbb.writeString(object.audioBase64!);
          final audioPathOffset = object.audioPath == null
              ? null
              : fbb.writeString(object.audioPath!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addOffset(2, locationOffset);
          fbb.addBool(3, object.isCompleted);
          fbb.addInt64(4, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.todoDate?.millisecondsSinceEpoch);
          fbb.addOffset(6, audioBase64Offset);
          fbb.addOffset(7, audioPathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final todoDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Todo(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              location: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              isCompleted: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              todoDate: todoDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(todoDateValue),
              audioBase64: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              audioPath: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Todo] entity fields to define ObjectBox queries.
class Todo_ {
  /// see [Todo.id]
  static final id = QueryIntegerProperty<Todo>(_entities[0].properties[0]);

  /// see [Todo.description]
  static final description =
      QueryStringProperty<Todo>(_entities[0].properties[1]);

  /// see [Todo.location]
  static final location = QueryStringProperty<Todo>(_entities[0].properties[2]);

  /// see [Todo.isCompleted]
  static final isCompleted =
      QueryBooleanProperty<Todo>(_entities[0].properties[3]);

  /// see [Todo.createdAt]
  static final createdAt =
      QueryIntegerProperty<Todo>(_entities[0].properties[4]);

  /// see [Todo.todoDate]
  static final todoDate =
      QueryIntegerProperty<Todo>(_entities[0].properties[5]);

  /// see [Todo.audioBase64]
  static final audioBase64 =
      QueryStringProperty<Todo>(_entities[0].properties[6]);

  /// see [Todo.audioPath]
  static final audioPath =
      QueryStringProperty<Todo>(_entities[0].properties[7]);
}
